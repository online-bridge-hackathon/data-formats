openapi: 3.0.2
info:
  x-logo:
    url: 'https://online-bridge-hackathon.github.io/data-formats/logo.png'
    backgroundColor: '#FFFFFF'
    altText: DDS LOGO
  description: >
    # Introduction

    An api that returns DDS results for a given board.


    Uses the Bo Hagland solver https://github.com/dds-bridge/dds -- requires the
    libdds.so (or dds.dll in windows) to be installed and accessible.

    Credit to Alexis Rimbaud of NukkAI for the python dds wrapper.


    # OpenAPI Specification

    This API is documented in **OpenAPI format**


    # Cross-Origin Resource Sharing

    This API features Cross-Origin Resource Sharing (CORS) implemented in
    compliance with  [W3C spec](https://www.w3.org/TR/cors/).

    And that allows cross-domain communication from the browser.

    All responses have a wildcard same-origin which makes them completely public
    and accessible to everyone, including any code on any site.


    # Authentication


    Forms of authentication:
      - API Key
  title: DDS
  version: 0.0.1
  termsOfService: 'http://example.com/terms/'
  contact:
    name: API Support
    email: support@example.com
    url: 'http://example.com/support'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
externalDocs:
  description: Full spec
  url: openapi.yaml
servers:
  - description: prod
    url: 'https://dds.prod.globalbridge.app/'
tags:
  - name: DDS
    description: DDS Api
components:
  responses:
    Default: &ref_7
      description: Unexpected Error
      content:
        application/json:
          schema: &ref_0
            description: Default Error Response Container
            properties:
              code:
                format: int32
                type: integer
              message:
                type: string
            required:
              - code
              - message
            type: object
            x-widdershins-oldRef: '#/components/schemas/Error'
      x-widdershins-oldRef: '#/components/responses/Default'
    NotFound: &ref_6
      description: The specified resource was not found
      content:
        application/json:
          schema: *ref_0
      x-widdershins-oldRef: '#/components/responses/NotFound'
    Success:
      description: Success
      content:
        application/json:
          schema: &ref_2
            description: Success
            properties:
              code:
                type: integer
              message:
                type: string
            required:
              - code
              - message
            type: object
            x-widdershins-oldRef: '#/components/schemas/Success'
    Solved: &ref_5
      description: Solved Response Schema
      content:
        application/json:
          schema: &ref_3
            description: DD analyses
            properties:
              S: &ref_1
                description: Suit Solved by DD analyses
                type: object
                properties:
                  'N':
                    type: integer
                    minimum: 0
                    maximum: 13
                    description: North
                  S:
                    type: integer
                    minimum: 0
                    maximum: 13
                    description: South
                  E:
                    type: integer
                    minimum: 0
                    maximum: 13
                    description: East
                  W:
                    type: integer
                    minimum: 0
                    maximum: 13
                    description: West
                x-widdershins-oldRef: '#/components/schemas/SuitSolved'
              H: *ref_1
              D: *ref_1
              C: *ref_1
              'N': *ref_1
            type: object
            x-widdershins-oldRef: '#/components/schemas/Solved'
      x-widdershins-oldRef: '#/components/responses/Solved'
  schemas:
    Error: *ref_0
    Success: *ref_2
    Solved: *ref_3
    Hand: &ref_4
      description: Player Hand
      type: array
      items:
        type: string
        pattern: (S|H|D|C)(2|3|4|5|6|7|8|9|T|J|Q|K|A)
      x-widdershins-oldRef: '#/components/schemas/Hand'
    SuitSolved: *ref_1
  requestBodies:
    HandPost: &ref_8
      content:
        application/json:
          example:
            hands:
              S:
                - D3
                - C6
                - DT
                - D8
                - DJ
                - D6
                - CA
                - C3
                - S2
                - C2
                - C4
                - S9
                - S7
              W:
                - DA
                - S4
                - HT
                - C5
                - D4
                - D7
                - S6
                - S3
                - DK
                - CT
                - D2
                - SK
                - H8
              'N':
                - C7
                - H6
                - H7
                - H9
                - CJ
                - SA
                - S8
                - SQ
                - D5
                - S5
                - HK
                - C8
                - HA
              E:
                - H2
                - H5
                - CQ
                - D9
                - H4
                - ST
                - HQ
                - SJ
                - HJ
                - DQ
                - H3
                - C9
                - CK
          schema:
            type: object
            properties:
              hands:
                type: object
                properties:
                  'N': *ref_4
                  S: *ref_4
                  E: *ref_4
                  W: *ref_4
      x-widdershins-oldRef: '#/components/requestBodies/HandPost'
paths:
  /api/dds-table/:
    post:
      operationId: postDdsTable
      responses:
        '200': *ref_5
        '400': *ref_6
        '500': *ref_7
        default: *ref_7
      summary: Returns double dummy analyses for the hand
      requestBody: *ref_8
      tags:
        - DDS
      x-code-samples:
        - lang: Node + Request
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'https://dds.prod.globalbridge.app//api/dds-table/',
              headers: {'content-type': 'application/json'},
              body: {hands: {N: ['string'], S: ['string'], E: ['string'], W: ['string']}},
              json: true
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url https://dds.prod.globalbridge.app//api/dds-table/ \
              --header 'content-type: application/json' \
              --data '{"hands":{"N":["string"],"S":["string"],"E":["string"],"W":["string"]}}'
        - lang: Shell + Httpie
          source: >-
            echo
            '{"hands":{"N":["string"],"S":["string"],"E":["string"],"W":["string"]}}'
            |  \
              http POST https://dds.prod.globalbridge.app//api/dds-table/ \
              content-type:application/json
        - lang: Python + Python3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("dds.prod.globalbridge.app")


            payload =
            "{\"hands\":{\"N\":[\"string\"],\"S\":[\"string\"],\"E\":[\"string\"],\"W\":[\"string\"]}}"


            headers = { 'content-type': "application/json" }


            conn.request("POST", "//api/dds-table/", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: C + Libcurl
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://dds.prod.globalbridge.app//api/dds-table/");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"hands\":{\"N\":[\"string\"],\"S\":[\"string\"],\"E\":[\"string\"],\"W\":[\"string\"]}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: Java + Unirest
          source: >-
            HttpResponse<String> response =
            Unirest.post("https://dds.prod.globalbridge.app//api/dds-table/")
              .header("content-type", "application/json")
              .body("{\"hands\":{\"N\":[\"string\"],\"S\":[\"string\"],\"E\":[\"string\"],\"W\":[\"string\"]}}")
              .asString();
        - lang: Javascript + Xhr
          source: >-
            var data = JSON.stringify({
              "hands": {
                "N": [
                  "string"
                ],
                "S": [
                  "string"
                ],
                "E": [
                  "string"
                ],
                "W": [
                  "string"
                ]
              }
            });


            var xhr = new XMLHttpRequest();

            xhr.withCredentials = true;


            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });


            xhr.open("POST",
            "https://dds.prod.globalbridge.app//api/dds-table/");

            xhr.setRequestHeader("content-type", "application/json");


            xhr.send(data);
