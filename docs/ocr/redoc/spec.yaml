openapi: 3.0.2
info:
  x-logo:
    url: 'https://online-bridge-hackathon.github.io/data-formats/logo.png'
    backgroundColor: '#FFFFFF'
    altText: OCR LOGO
  description: >
    # Introduction

    Object Character Recognition API that receives 4 hands at a bridge table and
    serves a LIN/PBN./etc describing the hand


    # OpenAPI Specification

    This API is documented in **OpenAPI format**


    # Cross-Origin Resource Sharing

    This API features Cross-Origin Resource Sharing (CORS) implemented in
    compliance with  [W3C spec](https://www.w3.org/TR/cors/).

    And that allows cross-domain communication from the browser.

    All responses have a wildcard same-origin which makes them completely public
    and accessible to everyone, including any code on any site.


    # Authentication


    Forms of authentication:
      - API Key
  title: Bridge OCR
  version: 0.0.1
  termsOfService: 'http://example.com/terms/'
  contact:
    name: API Support
    email: support@example.com
    url: 'http://example.com/support'
  license:
    name: MIT
externalDocs:
  description: Full spec
  url: openapi.yaml
servers:
  - description: dev
    url: 'http://localhost:8080/'
tags:
  - name: Hand
    description: Hand related operations
  - name: Auction
    description: Auction related operations
components:
  responses:
    Default: &ref_6
      description: Unexpected Error
      content:
        application/json:
          schema: &ref_0
            description: Default Error Response Container
            properties:
              code:
                format: int32
                type: integer
              message:
                type: string
            required:
              - code
              - message
            type: object
            x-widdershins-oldRef: '#/components/schemas/Error'
      x-widdershins-oldRef: '#/components/responses/Default'
    NotFound: &ref_5
      description: The specified resource was not found
      content:
        application/json:
          schema: *ref_0
      x-widdershins-oldRef: '#/components/responses/NotFound'
    Success:
      description: Success
      content:
        application/json:
          schema: &ref_1
            description: Success
            properties:
              code:
                type: integer
              message:
                type: string
            required:
              - code
              - message
            type: object
            x-widdershins-oldRef: '#/components/schemas/Success'
    Hand: &ref_4
      description: Hand Response Schema
      content:
        application/json:
          schema: &ref_2
            description: 'A full hand, e.g: ({N: [S3, H4, DJ,CA ], S: [S4...], ...})'
            properties:
              'n':
                type: array
                items:
                  type: string
              s:
                type: array
                items:
                  type: string
              e:
                type: array
                items:
                  type: string
              w:
                type: array
                items:
                  type: string
            type: object
            x-widdershins-oldRef: '#/components/schemas/Hand'
      x-widdershins-oldRef: '#/components/responses/Hand'
    Auction: &ref_7
      description: Auction Response Schema
      content:
        application/json:
          schema: &ref_3
            description: 'A full auction e.g: ({})'
            properties:
              dealer:
                type: string
              sequence:
                type: array
                items:
                  type: string
            type: object
            x-widdershins-oldRef: '#/components/schemas/Auction'
      x-widdershins-oldRef: '#/components/responses/Auction'
  schemas:
    Error: *ref_0
    Success: *ref_1
    Hand: *ref_2
    Auction: *ref_3
paths:
  /api/hand:
    post:
      operationId: postHand
      responses:
        '200': *ref_4
        '400': *ref_5
        '500': *ref_6
        default: *ref_6
      summary: 'Parses an image with cards, returning a complete hand in JSON'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                language:
                  type: string
                  default: en
                  enum:
                    - en
                    - fr
                    - pt
                    - de
                    - nl
                    - it
                    - es
                file:
                  type: string
                  format: binary
      tags:
        - Hand
      x-code-samples:
        - lang: Node + Request
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://localhost:8080//api/hand',
              headers: {'content-type': 'multipart/form-data'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url http://localhost:8080//api/hand \
              --header 'content-type: multipart/form-data'
        - lang: Shell + Httpie
          source: |-
            http POST http://localhost:8080//api/hand \
              content-type:multipart/form-data
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPConnection("localhost:8080")

            headers = { 'content-type': "multipart/form-data" }

            conn.request("POST", "//api/hand", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: C + Libcurl
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "http://localhost:8080//api/hand");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "content-type:
            multipart/form-data");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: Java + Unirest
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://localhost:8080//api/hand")
              .header("content-type", "multipart/form-data")
              .asString();
        - lang: Javascript + Xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "http://localhost:8080//api/hand");
            xhr.setRequestHeader("content-type", "multipart/form-data");

            xhr.send(data);
  /api/auction:
    post:
      operationId: postAuction
      responses:
        '200': *ref_7
        '400': *ref_5
        '500': *ref_6
        default: *ref_6
      summary: 'Parses an image with the auction, returning the auction in JSON'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                language:
                  type: string
                file:
                  type: string
                  format: binary
      tags:
        - Auction
      x-code-samples:
        - lang: Node + Request
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'http://localhost:8080//api/auction',
              headers: {'content-type': 'multipart/form-data'}
            };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: Shell + Curl
          source: |-
            curl --request POST \
              --url http://localhost:8080//api/auction \
              --header 'content-type: multipart/form-data'
        - lang: Shell + Httpie
          source: |-
            http POST http://localhost:8080//api/auction \
              content-type:multipart/form-data
        - lang: Python + Python3
          source: |-
            import http.client

            conn = http.client.HTTPConnection("localhost:8080")

            headers = { 'content-type': "multipart/form-data" }

            conn.request("POST", "//api/auction", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: C + Libcurl
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "http://localhost:8080//api/auction");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "content-type:
            multipart/form-data");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: Java + Unirest
          source: >-
            HttpResponse<String> response =
            Unirest.post("http://localhost:8080//api/auction")
              .header("content-type", "multipart/form-data")
              .asString();
        - lang: Javascript + Xhr
          source: |-
            var data = null;

            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
              if (this.readyState === this.DONE) {
                console.log(this.responseText);
              }
            });

            xhr.open("POST", "http://localhost:8080//api/auction");
            xhr.setRequestHeader("content-type", "multipart/form-data");

            xhr.send(data);
